from aiogram.filters import CommandStart, Command, BaseFilter
from aiogram.types import Message
from aiogram import F, Bot, Router, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from utils import *
import logging
from request import *
from request.request_admin import *
from request.nlp import *
from aiogram.types import reply_keyboard_markup, keyboard_button
import keyboards.keyboards as kb
from datetime import datetime
from aiogram import types
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import random

nlp_processor = NLPProcessor()
processed_messages = {}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
tarif = Router()


class routerreg(StatesGroup):
    routername = State()
    routercost = State()
    routermesh = State()
    routertariff = State()
    routerg5 = State()
    routerports = State()


class TariffForm(StatesGroup):
    tarif_name = State()
    stoimost_tarif = State()
    stoimost_6month = State()
    stoimost_12month = State()
    akciya = State()


#–∑–∞–ø—Ä–æ—Å /start
@router.message(Command("start"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: Message):
    processed_messages[message.message_id] = True

    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    fio = f"{first_name} {last_name}".strip()
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cursor.execute('SELECT admin_status FROM users_table WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    
    if user_data:
        if user_data[0] == 1:
            await message.answer('–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!', reply_markup=kb.main_kb)
        else:
            await message.answer('–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!', reply_markup=kb.main_kb)
    else:
        try:
            cursor.execute('''
                INSERT INTO users_table (user_id, username, fio, admin_status)
                VALUES (?, ?, ?, 0)
            ''', (user_id, username, fio))
            conn.commit()
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É.', reply_markup=kb.main_kb)
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {str(e)}')
        finally:
            conn.close()
            
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_user_admin(user_id: int) -> bool:
    with sqlite3.connect('user_data.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT admin_status FROM users_table WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else False

@router.message(F.text == '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∂–µ')
async def show_routers(message: types.Message):
    processed_messages[message.message_id] = True
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin = is_user_admin(user_id)
    
    routers = get_all_routers()
    if not routers:
        reply_text = "–†–æ—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if is_admin:
            reply_text += " –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä."
            await message.answer(reply_text, reply_markup=kb.change_routers_kb)
        else:
            await message.answer(reply_text, reply_markup=kb.main_kb)
        return
    
    for router in routers:
        formatted_message = format_router_for_display(router)
        if is_admin:
            await message.answer(formatted_message, reply_markup=kb.change_routers_kb)
        else:
            await message.answer(formatted_message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ  reply_markup=kb.change_routers_kb –≤—ã–≤–æ–¥–∫–ª–∞–≤—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä—ã

#—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è "–æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏" –º–µ–∂–¥—É —é–∑–µ—Ä–æ–º –∏ –∞–¥–º–∏–Ω–æ–º
class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()



async def get_admins_ids():
    
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users_table WHERE admin_status = 1")
        admins = [row[0] for row in cursor.fetchall()]
        return admins if admins else [1349520375]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—à ID –∫–∞–∫ fallback
    except Exception as e:
        logger.error(f"Error getting admins list: {e}")
        return 
    finally:
        conn.close()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT admin_status FROM users_table WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 1
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False
    finally:
        conn.close()

@router.message(F.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def start_feedback(message: types.Message, state: FSMContext):
    processed_messages[message.message_id] = True

    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(FeedbackStates.waiting_for_feedback)

@router.message(FeedbackStates.waiting_for_feedback)
async def process_feedback(message: types.Message, state: FSMContext, bot: Bot):
    user = message.from_user
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO feedback_table 
            (user_fb_id, username_fb, message)
            VALUES (?, ?, ?)
        ''', (user.id, user.username, message.text))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await get_admins_ids()
        success_sent = False
        
        for admin_id in admins:
            try:
                await bot.send_message(
                    admin_id,
                    f"üöÄ –ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫!\n"
                    f"–û—Ç: @{user.username or '–Ω–µ—Ç username'} (ID: {user.id})\n"
                    f"–¢–µ–∫—Å—Ç: {message.text}\n\n"
                    f"–û—Ç–≤–µ—Ç–∏—Ç—å: /reply {user.id} [—Ç–µ–∫—Å—Ç]"
                )
                success_sent = True
            except Exception as e:
                logger.error(f"Can't send message to admin {admin_id}: {e}")
                continue
        
        if success_sent:
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",reply_markup=kb.main_kb)
        else:
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –ø–æ–∑–∂–µ.",reply_markup=kb.main_kb)

    except Exception as e:
        print(f"Feedback processing error: {e}")
        #await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    finally:
        if 'conn' in locals():
            conn.close()
        await state.clear()

@router.message(Command("reply"))
async def admin_reply(message: types.Message, bot: Bot):
    processed_messages[message.message_id] = True

    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
        try:
            user_id = int(parts[1])
        except ValueError:
            raise ValueError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        reply_text = parts[2].strip()
        if not reply_text:
            raise ValueError("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}"
            )
            send_success = True
        except Exception as e:
            logger.error(f"Can't send to user {user_id}: {e}")
            send_success = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE feedback_table 
            SET status = ?,
                admin_id = ?,
                reply_message = ?
            WHERE user_fb_id = ? AND status = 'new'
        ''', ('replied' if send_success else 'failed', 
              message.from_user.id, 
              reply_text, 
              user_id))
        
        conn.commit()
        
        if cursor.rowcount == 0:
            await message.answer(f"‚ö† –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            status_msg = "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if send_success else "‚ö† –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            await message.answer(f"{status_msg} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")
            
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–§–æ—Ä–º–∞—Ç: /reply USER_ID —Ç–µ–∫—Å—Ç")
    except Exception as e:
        logger.error(f"Admin reply error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    finally:
        if 'conn' in locals():
            conn.close()

@router.message(Command("feedback_list"))
async def list_feedback(message: types.Message):
    processed_messages[message.message_id] = True

    if not await is_admin(message.from_user.id):
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id_fb, user_fb_id, username_fb, message, created_at 
            FROM feedback_table 
            WHERE status = 'new'
            ORDER BY created_at DESC
            LIMIT 50
        ''')
        
        feedbacks = cursor.fetchall()
        
        if not feedbacks:
            await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
            
        for fb in feedbacks:
            fb_id, user_id, username, msg, created_at = fb
            
            fb_text = (
                f"üì© ID: {fb_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–Ω–µ—Ç username'} (ID: {user_id})\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                f"‚úâ –°–æ–æ–±—â–µ–Ω–∏–µ: {msg[:200]}{'...' if len(msg) > 200 else ''}\n\n"
                f"–û—Ç–≤–µ—Ç–∏—Ç—å: /reply {user_id} –≤–∞—à_—Ç–µ–∫—Å—Ç"
            )
            await message.answer(reply_markup=kb.main_kb)
            try:
                await message.answer(fb_text)
            except Exception as e:
                logger.error(f"Can't send feedback message: {e}")
                continue
                
    except Exception as e:
        logger.error(f"Feedback list error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    finally:
        conn.close()
    

#–∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∞ "–∫—Ç–æ —Ç—ã? –ë–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏" - –∫–Ω–æ–ø–∫–∞ —É–±—Ä–∞–Ω–∞, –∫–æ–º–∞–Ω–¥–∞ '–∫—Ç–æ —Ç—ã?' –æ—Å—Ç–∞–ª–∞—Å—å
@router.message(F.text == '–ö—Ç–æ —Ç—ã?')
async def who_are_you(message : Message):
    processed_messages[message.message_id] = True

    await message.answer('—è –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')

#–∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∞ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"
@router.message(F.text == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã')
async def show_tariffs(message: types.Message):
    processed_messages[message.message_id] = True
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin = is_user_admin(user_id)
    #user_id = message.from_user.id
    tarifs = get_all_tariffs()
    if not tarifs:
        reply_text = "–†–æ—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if is_admin:
            reply_text += " –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä."
            await message.answer(reply_text, reply_markup=kb.change_tarif_kb)
        else:
            await message.answer(reply_text, reply_markup=kb.main_kb)
        return
    
    for tarifs in tarifs:
        formatted_message = format_tarifs_for_display(tarifs)
        if is_admin:
            await message.answer(formatted_message, reply_markup=kb.change_tarif_kb)
        else:
            await message.answer(formatted_message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ  reply_markup=kb.change_routers_kb –≤—ã–≤–æ–¥–∫–ª–∞–≤—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä—ã


@router.message(F.text == '–ù–∞–∑–∞–¥')
async def main_menu(message : Message):
    processed_messages[message.message_id] = True
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',reply_markup=kb.main_kb)


#FSM –Ω–∞—á–∞–ª–æ —Ä–æ—É—Ç–µ—Ä—Å

@router.message(F.text == '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞')
async def add_router1(message: Message, state: FSMContext):
    

    if not admin_authorized(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    processed_messages[message.message_id] = True
    await state.set_state(routerreg.routername)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')

@router.message(routerreg.routername)
async def add_router2(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    await state.update_data(routername=message.text)
    await state.set_state(routerreg.routercost)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π)')

@router.message(routerreg.routercost)
async def add_router3(message: Message, state: FSMContext):
    #processed_messages[message.message_id] = True

    try:
        cost = float(message.text)
        await state.update_data(routercost=cost)
        await state.set_state(routerreg.routermesh)
        await message.answer('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä Mesh? (–î–∞/–ù–µ—Ç)')
    except ValueError:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!')
    processed_messages[message.message_id] = True
@router.message(routerreg.routermesh)
async def add_router4(message: Message, state: FSMContext):
    

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        return
    processed_messages[message.message_id] = True    
    await state.update_data(routermesh=message.text.lower() == '–¥–∞')
    await state.set_state(routerreg.routertariff)
    await message.answer('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ä–æ—É—Ç–µ—Ä —Ç–∞—Ä–∏—Ñ—ã >100 –º–±? (–î–∞/–ù–µ—Ç)')

@router.message(routerreg.routertariff)
async def add_router5(message: Message, state: FSMContext):
    

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        return
    processed_messages[message.message_id] = True    
    await state.update_data(routertariff=message.text.lower() == '–¥–∞')
    await state.set_state(routerreg.routerg5)
    await message.answer('–ò–º–µ–µ—Ç –ª–∏ —Ä–æ—É—Ç–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω 5G? (–î–∞/–ù–µ—Ç)')

@router.message(routerreg.routerg5)
async def add_router6(message: Message, state: FSMContext):
    

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        return
    processed_messages[message.message_id] = True    
    await state.update_data(routerg5=message.text.lower() == '–¥–∞')
    await state.set_state(routerreg.routerports)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ (—á–∏—Å–ª–æ)')

@router.message(routerreg.routerports)
async def add_router7(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    try:
        ports = int(message.text)
        await state.update_data(routerports=ports)
        data = await state.get_data()
        conn = sqlite3.connect('user_data.db')
        cursor = conn.cursor()
        cursor.execute('''
    INSERT INTO routers_table (model_id, model_name, model_cost, mesh, tariff_1000, g5_diap, number_ports)
    SELECT COALESCE(MAX(model_id), 0) + 1, ?, ?, ?, ?, ?, ? 
    FROM routers_table
''', (
            data['routername'],
            data['routercost'],
            data['routermesh'],
            data['routertariff'],
            data['routerg5'],
            data['routerports'],
))

        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –†–æ—É—Ç–µ—Ä  —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ú–æ–¥–µ–ª—å: {data['routername']}\n"
            f"–¶–µ–Ω–∞: {data['routercost']} —Ä—É–±.\n"
            f"Mesh: {'–î–∞' if data['routermesh'] else '–ù–µ—Ç'}\n"
            f"–¢–∞—Ä–∏—Ñ 1000 –ú–±–∏—Ç/—Å: {'–î–∞' if data['routertariff'] else '–ù–µ—Ç'}\n"
            f"5 –ì–ì—Ü: {'–î–∞' if data['routerg5'] else '–ù–µ—Ç'}\n"
            f"–ü–æ—Ä—Ç–æ–≤: {data['routerports']}\n"
            f"_________________________________"
        )
        await state.clear()
        
    except ValueError:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç–æ–≤!')
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}')
        await state.clear()

#FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
class EditRouter(StatesGroup):
    waiting_for_router_id = State()
    routername = State()
    routercost = State()
    routermesh = State()
    routertariff = State()
    routerg5 = State()
    routerports = State()
#–ø–æ–∏—Å–∫ –ø–æ id 
@router.message(F.text == '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞')
async def edit_router_start(message: Message, state: FSMContext):
    

    if not admin_authorized(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    processed_messages[message.message_id] = True
    routers = get_all_routers()
    if not routers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return
    
    for router in routers:
        await message.answer(format_router_for_display(router))
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    await state.set_state(EditRouter.waiting_for_router_id)

#–ø–æ—Å–ª–µ id -> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω—ç–π–º–∞ 
@router.message(EditRouter.waiting_for_router_id)
async def edit_router_id(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    try:
        router_id = int(message.text)
        router = get_router_by_id(router_id)
        if not router:
            await message.answer(f"–†–æ—É—Ç–µ—Ä —Å ID {router_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        await state.update_data(router_id=router_id, routername=router[1], routercost=router[2],
                                routermesh=router[3], routertariff=router[4], routerg5=router[5], routerports=router[6])
        await state.set_state(EditRouter.routername)
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {router[1]}\n"
                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
                             "(–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return

#–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ <- –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω—ç–π–º–∞ 
@router.message(EditRouter.routername)
async def edit_router_name(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(routername=message.text)
    await state.set_state(EditRouter.routercost)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data['routercost']}\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π, –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

@router.message(EditRouter.routercost)
async def edit_router_cost(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            cost = float(message.text)
            await state.update_data(routercost=cost)
        except ValueError:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!')
            return
    await state.set_state(EditRouter.routermesh)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Mesh: {'–î–∞' if data['routermesh'] else '–ù–µ—Ç'}\n"
                         f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä Mesh? (–î–∞/–ù–µ—Ç/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

@router.message(EditRouter.routermesh)
async def edit_router_mesh(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞", "–ù–µ—Ç" –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"')
        return
    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(routermesh=message.text.lower() == '–¥–∞')
    await state.set_state(EditRouter.routertariff)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ >100 –ú–±–∏—Ç/—Å: {'–î–∞' if data['routertariff'] else '–ù–µ—Ç'}\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ä–æ—É—Ç–µ—Ä —Ç–∞—Ä–∏—Ñ—ã >100 –ú–±–∏—Ç/—Å? (–î–∞/–ù–µ—Ç/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

@router.message(EditRouter.routertariff)
async def edit_router_tariff(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞", "–ù–µ—Ç" –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"')
        return
    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(routertariff=message.text.lower() == '–¥–∞')
    await state.set_state(EditRouter.routerg5)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω 5G: {'–î–∞' if data['routerg5'] else '–ù–µ—Ç'}\n–ò–º–µ–µ—Ç –ª–∏ —Ä–æ—É—Ç–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω 5G? (–î–∞/–ù–µ—Ç/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

@router.message(EditRouter.routerg5)
async def edit_router_g5(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞", "–ù–µ—Ç" –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"')
        return
    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(routerg5=message.text.lower() == '–¥–∞')
    await state.set_state(EditRouter.routerports)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤: {data['routerports']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ (—á–∏—Å–ª–æ, –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

@router.message(EditRouter.routerports)
async def edit_router_ports(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            ports = int(message.text)
            await state.update_data(routerports=ports)
        except ValueError:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç–æ–≤!')
            return
    
    data = await state.get_data()
    try:
        update_router_in_db(data['router_id'], data)
        await message.answer(
           # f"‚úÖ –†–æ—É—Ç–µ—Ä —Å ID {data['model_id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            f"–ú–æ–¥–µ–ª—å: {data['routername']}\n"
            f"–¶–µ–Ω–∞: {data['routercost']} —Ä—É–±.\n"
            f"Mesh: {'–î–∞' if data['routermesh'] else '–ù–µ—Ç'}\n"
            f"–¢–∞—Ä–∏—Ñ 1000 –ú–±–∏—Ç/—Å: {'–î–∞' if data['routertariff'] else '–ù–µ—Ç'}\n"
            f"5 –ì–ì—Ü: {'–î–∞' if data['routerg5'] else '–ù–µ—Ç'}\n"
            f"–ü–æ—Ä—Ç–æ–≤: {data['routerports']}\n"
            f"_________________________________",
            reply_markup=kb.main_kb
        )
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}')
    finally:
        await state.clear()

def update_router_in_db(router_id, data):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE routers_table
        SET model_name = ?, model_cost = ?, mesh = ?, tariff_1000 = ?, g5_diap = ?, number_ports = ?
        WHERE model_id = ?
    ''', (
        data['routername'],
        data['routercost'],
        data['routermesh'],
        data['routertariff'],
        data['routerg5'],
        data['routerports'],
        router_id
    ))
    conn.commit()
    conn.close()
    return True   

#FSM –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –†–û–£–¢–ï–†–ê
class DeleteRouter(StatesGroup):
    waiting_for_router_id = State()
    confirmation = State()

@router.message(F.text == '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞')
async def delete_router_start(message: Message, state: FSMContext):
  

    if not admin_authorized(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    processed_messages[message.message_id] = True
    routers= get_all_routers()
    if not routers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    for router in routers:
        await message.answer(format_router_for_display(router))
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteRouter.waiting_for_router_id)

@router.message(DeleteRouter.waiting_for_router_id)
async def delete_router_by_id(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    try:
        router_id = int(message.text)
        if delete_router_from_db(router_id):
            await message.answer(f"–†–æ—É—Ç–µ—Ä —Å ID {router_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        else:
            await message.answer(f"–†–æ—É—Ç–µ—Ä —Å ID {router_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    finally:
        await state.clear()



@router.message(DeleteRouter.waiting_for_router_id)
async def confirm_deletion(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    router_id = int(message.text)
    await state.update_data(router_id=router_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—É—Ç–µ—Ä–µ
    router = get_router_by_id(router_id)
    await message.answer(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ?\n"
        f"{format_router_for_display(router)}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ (–î–∞/–ù–µ—Ç):",
        reply_markup=reply_keyboard_markup(
            keyboard=[
                [keyboard_button(text="–î–∞"), keyboard_button(text="–ù–µ—Ç")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(DeleteRouter.confirmation)



#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ FSM

@router.message(F.text == '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
async def addtariff1(message:Message ,state:FSMContext):
    

    if not admin_authorized(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    processed_messages[message.message_id] = True
    await state.set_state(TariffForm.tarif_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
#–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å

@router.message(TariffForm.tarif_name)
async def add_tariff2(message:Message, state:FSMContext):
    processed_messages[message.message_id] = True

    await state.update_data(tarif_name=message.text)
    await state.set_state(TariffForm.stoimost_tarif)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)')
#—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –ø–µ—Ä–µ—Ö=–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 6 –º–µ—Å—á—è—Ü–µ–≤

@router.message(TariffForm.stoimost_tarif)
async def add_tariff3(message:Message, state:FSMContext):
    processed_messages[message.message_id] = True

    try:
        cost = float(message.text)
        await state.update_data(stoimost_tarif=cost)
        await state.set_state(TariffForm.stoimost_6month)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞)')
    except ValueError:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!')

#—Å–∫–∏–¥–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 12 –º–µ—Å—è—Ü–µ–≤
@router.message(TariffForm.stoimost_6month)
async def add_tariff4(message:Message, state:FSMContext):
    processed_messages[message.message_id] = True

    try:
        cost = float(message.text)  if message.text.lower() != '–Ω–µ—Ç' else None
        await state.update_data(stoimost_6month=cost)
        await state.set_state(TariffForm.stoimost_12month)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 12 –º–µ—Å—è—Ü–µ–≤(–ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞)')
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ "–Ω–µ—Ç"!')

@router.message(TariffForm.stoimost_12month)
async def add_tariff5(message:Message, state:FSMContext):
    processed_messages[message.message_id] = True

    try:
        cost = float(message.text) if message.text.lower() != '–Ω–µ—Ç' else None
        await state.update_data(stoimost_12month=cost)
        await state.set_state(TariffForm.akciya)
        await message.answer ('–¢–∞—Ä–∏—Ñ –ø–æ –∞–∫—Ü–∏–∏?(–û—Ç–≤–µ—Ç—å—Ç–µ –î–∞/–ù–µ—Ç)')
    except ValueError:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ "–Ω–µ—Ç"!')

@router.message(TariffForm.akciya)
async def add_tariff6(message:Message, state: FSMContext):
    

    if message.text.lower() not in ['–¥–∞','–Ω–µ—Ç']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        return
    processed_messages[message.message_id] = True
    await state.update_data(akciya=message.text.lower() == '–¥–∞')
    data = await state.get_data()
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tariffs_table (id_tarif, tarif_name, stoimost_tarif, stoimost_6month, stoimost_12month, akciya)
        SELECT COALESCE(MAX(id_tarif), 0) + 1, ?, ?, ?, ?, ?
        FROM tariffs_table
    ''', 
    (
        data['tarif_name'],
        data['stoimost_tarif'],
        data['stoimost_6month'],
        data['stoimost_12month'],
        data['akciya'],
    ))
    conn.commit()
    conn.close()
   
    await message.answer(
        f"‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['tarif_name']}\n"
        f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data['stoimost_tarif']} —Ä—É–±.\n"
        f"–ù–∞ 6 –º–µ—Å—è—Ü–µ–≤: {data['stoimost_6month'] or '–Ω–µ—Ç'}\n"
        f"–ù–∞ 12 –º–µ—Å—è—Ü–µ–≤: {data['stoimost_12month'] or '–Ω–µ—Ç'}\n"
        f"–ê–∫—Ü–∏–æ–Ω–Ω—ã–π: {'–î–∞' if data['akciya'] else '–ù–µ—Ç'}\n"
        "_____________________________________"
    )
    await state.clear()


#FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
class EditTariff(StatesGroup):
    waiting_for_tariff_id = State()
    tariff_name = State()
    tarifcost = State()
    cost_6month = State()
    cost_12month = State()
    editakciya = State()

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
@router.message(F.text == '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
async def edit_tarif(message: Message, state: FSMContext):
    

    if not admin_authorized(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    processed_messages[message.message_id] = True
    tariffs = get_all_tariffs()
    if not tariffs:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return
    
    for tarif in tariffs:
        await message.answer(format_tarifs_for_display(tarif))

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    await state.set_state(EditTariff.waiting_for_tariff_id)

#–ø–æ–∏—Å–∫ –ø–æ ID, –∏–∑–º–µ–Ω–µ–Ω–∏–µ name    
@router.message(EditTariff.waiting_for_tariff_id)
async def edit_tarif_id(message:Message, state:FSMContext):
    processed_messages[message.message_id] = True

    try:
        tariff_id = int(message.text)
        tarif = get_tarifs_by_id(tariff_id)
        if not tarif:
            await message.answer(f"–¢–∞—Ä–∏—Ñ —Å —Ç–∞–∫–∏–º ID {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
        
        await state.update_data(tariff_id=tariff_id, tarifname=tarif[1],tarifcost=tarif[2],
                                tarif6month=tarif[3], tarif12months=tarif[4], tarifakciya=tarif[5])
        await state.set_state(EditTariff.tariff_name)
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {tarif[1]}\n"
                             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ \n"
                             f"(–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏   
@router.message(EditTariff.tariff_name)
async def edit_tarif_name(message:Message, state: FSMContext):
    

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(tariff_name=message.text)
    processed_messages[message.message_id] = True
    await state.set_state(EditTariff.tarifcost)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: {data['tarifcost']} —Ä—É–±.\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞\n"
                         f"(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π, –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤?
@router.message(EditTariff.tarifcost)
async def edit_tarif_cost(message:Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            cost = float(message.text)
            await state.update_data(tarifcost=cost)
        except ValueError:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!')
            return
    await state.set_state(EditTariff.cost_6month)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 6 –º–µ—Å—è—Ü–µ–≤: {data['tarif6month']} —Ä—É–±.\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞\n"
                         f"(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π, –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤
@router.message(EditTariff.cost_6month)
async def edit_tarif_6month(message:Message, state: FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            cost = float(message.text)
            await state.update_data(cost_6month=cost)
        except ValueError:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!')
            return
    await state.set_state(EditTariff.cost_12month)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤: {data["tarif12months"]} —Ä—É–±.\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞\n"
                         f"(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π, –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    
@router.message(EditTariff.cost_12month)
async def edit_tarif_12_month(message:Message, state : FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            cost = float(message.text)
            await state.update_data(cost_12month=cost)
        except ValueError:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!')
            return
    await state.set_state(EditTariff.editakciya)
    data = await state.get_data()
    await message.answer(f"–¢–∞—Ä–∏—Ñ –∞–∫—Ü–∏–æ–Ω–Ω—ã–π: {'–î–∞' if data['tarifakciya'] else '–ù–µ—Ç'}\n"
                         f"–¢–∞—Ä–∏—Ñ –ø–æ –∞–∫—Ü–∏–∏? (–î–∞/–ù–µ—Ç/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")     

@router.message(EditTariff.editakciya)
async def edit_tarif_akciya(message:Message, state:FSMContext):
    processed_messages[message.message_id] = True

    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        await message.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞", "–ù–µ—Ç" –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"')
        return
    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(editakciya=message.text.lower() == '–¥–∞')
    
    data = await state.get_data()
    try:
        update_tariff_in_db(data['tariff_id'], data)
        await message.answer(
        #    f"‚úÖ –¢–∞—Ä–∏—Ñ —Å ID {data['tariff_id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['tariff_name']}\n"
            f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data['tarifcost']} —Ä—É–±.\n"
            f"–ù–∞ 6 –º–µ—Å—è—Ü–µ–≤: {data['cost_6month'] or '–Ω–µ—Ç'}\n"
            f"–ù–∞ 12 –º–µ—Å—è—Ü–µ–≤: {data['cost_12month'] or '–Ω–µ—Ç'}\n"
            f"–ê–∫—Ü–∏–æ–Ω–Ω—ã–π: {'–î–∞' if data['editakciya'] else '–ù–µ—Ç'}\n"
            f"_____________________________________",
            reply_markup=kb.main_kb
        )
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}')
    finally:
        await state.clear()

def update_tariff_in_db(tariff_id, data):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE tariffs_table
        SET tarif_name = ?, stoimost_tarif = ?, stoimost_6month = ?, stoimost_12month = ?, akciya = ?
        WHERE id_tarif = ?
''',    ( data['tariff_name'],
        data['tarifcost'],
        data['cost_6month'],
        data['cost_12month'],
        data['editakciya'],
        tariff_id
    ))
    conn.commit()
    conn.close()
    return True      


#FSM –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –¢–ê–†–ò–§–ê

class DeleteTariff(StatesGroup):
    waiting_for_tariff_id = State()
    confirmation = State()

@router.message(F.text == '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
async def delete_tariff_start(message: Message, state: FSMContext):
    

    if not admin_authorized(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    processed_messages[message.message_id] = True
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    tariffs = get_all_tariffs()
    if not tariffs:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    for tariff in tariffs:
        await message.answer(format_tarifs_for_display(tariff))
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteTariff.waiting_for_tariff_id)

@router.message(DeleteTariff.waiting_for_tariff_id)
async def delete_tariff_by_id(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    try:
        tariff_id = int(message.text)
        if delete_tariff_from_db(tariff_id):
            await message.answer(f"–¢–∞—Ä–∏—Ñ —Å ID {tariff_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        else:
            await message.answer(f"–¢–∞—Ä–∏—Ñ —Å ID {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    finally:
        await state.clear()



@router.message(DeleteTariff.waiting_for_tariff_id)
async def confirm_deletion(message: Message, state: FSMContext):
    processed_messages[message.message_id] = True

    tariff_id = int(message.text)
    await state.update_data(tariff_id=tariff_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    tariff = get_tarifs_by_id(tariff_id)
    await message.answer(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ?\n"
        f"{format_tarifs_for_display(tariff)}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ (–î–∞/–ù–µ—Ç):",
        reply_markup=reply_keyboard_markup(
            keyboard=[
                [keyboard_button(text="–î–∞"), keyboard_button(text="–ù–µ—Ç")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(DeleteTariff.confirmation)




class NLPResponder:
    def __init__(self):
        self._init_nltk()
        self.stop_words = set(stopwords.words('russian'))
        self.knowledge_base = {
            "–ø—Ä–∏–≤–µ—Ç": ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"],
            "–ø—Ä–æ–±–ª–µ–º–∞": ["–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?"],
            "–ø—Ä–æ–±–ª–µ–º—ã": ["–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?"],
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä.", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."],
            "–∫–æ–º–ø—å—é—Ç–µ—Ä": ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä.", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–∞–±–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ."],
            "—Å–ø–∞—Å–∏–±–æ": ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –±—É–¥—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã.", "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"],
            "default": ["–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?", "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."]
        }

    def _init_nltk(self):
        try:
            nltk.data.find('tokenizers/punkt')
            nltk.data.find('corpora/stopwords')
        except LookupError:
            nltk.download('punkt_tab')
            nltk.download('stopwords')

    def preprocess_text(self, text):
        tokens = word_tokenize(text.lower())
        return [token for token in tokens if token.isalpha() and token not in self.stop_words]

    async def get_response(self, text):
        tokens = self.preprocess_text(text)
        for word in tokens:
            if word in self.knowledge_base:
                return random.choice(self.knowledge_base[word])
        return random.choice(self.knowledge_base["default"])

nlp_responder = NLPResponder()

@router.message()
async def nlp_fallback_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ knowledge_base.
    """
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /)
    if message.text.startswith('/'):
        return
        
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    if not getattr(message, 'handled', False):
        response = nlp_processor.get_response(message.text)
        await message.answer(response)